异常的基本概念

异常两要素：抛出异常、捕获异常

抛出异常：显式抛异常的主体是应用程序（throw），隐式抛异常的主体是jvm

捕获异常：

try：标记需要异常监控

catch：捕获try中触发的特定类型异常并处理

finally：声明必须运行的代码，避免跳过清理代码

finally何时执行：

try顺利执行后finally执行

try触发异常，但未被捕获，执行finally并抛出异常给上一级

try触发异常，被catch捕获，catch顺利执行后finally执行

try触发异常，被catch捕获，catch内触发新异常，中断catch执行finally后抛出新异常给调用者（原异常被忽略）

若finally内部触发新异常，中断finally并抛出新异常给调用者（原异常被忽略）

所有异常都是Throwable及其子类。它的直接子类有：

Error：程序不应该捕获的异常，触发时无法恢复，终止线程或jvm

Exception：可能需要捕获并处理的异常。其特殊子类RuntimeException表示“程序无法继续执行但能抢救”

Error和RuntimeException是非检查异常，其他是检查异常

检查异常需要显式捕获或重新抛出。通常自定义的异常为检查异常

构造异常实例很昂贵，jvm需生成该异常的栈轨迹（stack trace），逐一访问当前线程的栈帧，记录调试信息（方法名、类名、文件名、行数等）

生成栈轨迹时会忽略异常构造器和填充栈帧的Throwable.fillInStackTrace方法，从新建异常的位置开始生成。另外还会忽略不可见的栈帧

Jvm如何捕获异常

字节码中的每个方法都有异常表，每个条目代表异常处理器

异常指针的组成：from指针、to指针、target指针、捕获的异常类型。指针的值是字节码索引

From和to指针表示异常处理器监控的范围（如try），target指针指向异常处理器的起始位置（如catch）

触发异常时，jvm遍历异常表的所有条目，触发异常的字节码在某个from-to范围内则检验异常类型是否匹配，匹配则将控制流转到target指针指向的字节码

若遍历完异常表仍未找到匹配，则弹出当前方法的栈帧，在调用者中重复遍历异常表

对于finally，编译时复制它的内容，放到try-catch的所有正常路径和异常路径的出口中

对于异常执行路径（catch），jvm也会生成异常表条目并捕获异常，这些条目的target指针指向复制的finally代码块，保证catch内抛出异常也能执行final，并对外抛出新异常（原来的异常被忽略）

java7的supressed异常及语法糖

Supressed异常：允许将一个异常附加在另一个异常之上。故抛出的异常可携带多个异常的信息

try-with-resources语法糖：精简资源打开关闭，并在字节码层面自动使用supressed异常，防止catch中抛出新异常导致原异常被忽略

在java7前，每一个资源都要写一层try-finally（因为关闭资源时finally也易触发异常），而使用try-with-resources只需在一个try中声明多个资源（底层字节码类似嵌套try-finally），且资源实现AutoCloseable接口。编译器会自动添加close()操作

多异常捕获：java7之后还可在同一catch中捕获多种异常。实现上会生成多个方法表条目
